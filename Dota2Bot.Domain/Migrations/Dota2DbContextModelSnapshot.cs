// <auto-generated />
using System;
using Dota2Bot.Domain;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Dota2Bot.Domain.Migrations
{
    [DbContext(typeof(Dota2DbContext))]
    partial class Dota2DbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("public")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Dota2Bot.Domain.Entity.Hero", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("heroes");
                });

            modelBuilder.Entity("Dota2Bot.Domain.Entity.Match", b =>
                {
                    b.Property<long>("MatchId")
                        .HasColumnName("match_id")
                        .HasColumnType("bigint");

                    b.Property<long>("PlayerId")
                        .HasColumnName("player_id")
                        .HasColumnType("bigint");

                    b.Property<int>("Assists")
                        .HasColumnName("assists")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateStart")
                        .HasColumnName("date_start")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Deaths")
                        .HasColumnName("deaths")
                        .HasColumnType("integer");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnName("duration")
                        .HasColumnType("interval");

                    b.Property<int>("GameMode")
                        .HasColumnName("game_mode")
                        .HasColumnType("integer");

                    b.Property<int>("HeroId")
                        .HasColumnName("hero_id")
                        .HasColumnType("integer");

                    b.Property<int>("Kills")
                        .HasColumnName("kills")
                        .HasColumnType("integer");

                    b.Property<int>("LeaverStatus")
                        .HasColumnName("leaver_status")
                        .HasColumnType("integer");

                    b.Property<int>("LobbyType")
                        .HasColumnName("lobby_type")
                        .HasColumnType("integer");

                    b.Property<short>("PlayerSlot")
                        .HasColumnName("player_slot")
                        .HasColumnType("smallint");

                    b.Property<bool>("Won")
                        .HasColumnName("won")
                        .HasColumnType("boolean");

                    b.HasKey("MatchId", "PlayerId");

                    b.HasIndex("HeroId");

                    b.HasIndex("PlayerId");

                    b.ToTable("matches");
                });

            modelBuilder.Entity("Dota2Bot.Domain.Entity.Player", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnName("id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastMatchDate")
                        .HasColumnName("last_match_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("LastMatchId")
                        .HasColumnName("last_match_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastRatingDate")
                        .HasColumnName("last_rating_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("LoseCount")
                        .HasColumnName("lose_count")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.Property<int>("PartyRank")
                        .HasColumnName("party_rank")
                        .HasColumnType("integer");

                    b.Property<int?>("RankTier")
                        .HasColumnName("rank_tier")
                        .HasColumnType("integer");

                    b.Property<int>("SoloRank")
                        .HasColumnName("solo_rank")
                        .HasColumnType("integer");

                    b.Property<string>("SteamId")
                        .HasColumnName("steamid")
                        .HasColumnType("text");

                    b.Property<int>("WinCount")
                        .HasColumnName("win_count")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("players");
                });

            modelBuilder.Entity("Dota2Bot.Domain.Entity.Rating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnName("date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("MatchId")
                        .HasColumnName("match_id")
                        .HasColumnType("bigint");

                    b.Property<int>("PartyRank")
                        .HasColumnName("party_rank")
                        .HasColumnType("integer");

                    b.Property<long>("PlayerId")
                        .HasColumnName("player_id")
                        .HasColumnType("bigint");

                    b.Property<int>("SoloRank")
                        .HasColumnName("solo_rank")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.ToTable("rating");
                });

            modelBuilder.Entity("Dota2Bot.Domain.Entity.TgChat", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnName("id")
                        .HasColumnType("bigint");

                    b.Property<string>("Timezone")
                        .HasColumnName("timezone")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("tg_chats");
                });

            modelBuilder.Entity("Dota2Bot.Domain.Entity.TgChatPlayers", b =>
                {
                    b.Property<long>("ChatId")
                        .HasColumnName("id_chat")
                        .HasColumnType("bigint");

                    b.Property<long>("PlayerId")
                        .HasColumnName("id_player")
                        .HasColumnType("bigint");

                    b.HasKey("ChatId", "PlayerId");

                    b.HasIndex("PlayerId");

                    b.ToTable("tg_chat_players");
                });

            modelBuilder.Entity("Dota2Bot.Domain.Entity.Match", b =>
                {
                    b.HasOne("Dota2Bot.Domain.Entity.Hero", "Hero")
                        .WithMany()
                        .HasForeignKey("HeroId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dota2Bot.Domain.Entity.Player", "Player")
                        .WithMany("Matches")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Dota2Bot.Domain.Entity.Rating", b =>
                {
                    b.HasOne("Dota2Bot.Domain.Entity.Player", "Player")
                        .WithMany("Ratings")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Dota2Bot.Domain.Entity.TgChatPlayers", b =>
                {
                    b.HasOne("Dota2Bot.Domain.Entity.TgChat", "Chat")
                        .WithMany("ChatPlayers")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dota2Bot.Domain.Entity.Player", "Player")
                        .WithMany("ChatPlayers")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
